@*
/// ============================================================
/// Author: Shaun Curtis, Cold Elm Coders
/// License: Use And Donate
/// If you use it, donate something to a charity somewhere
/// ============================================================
*@

@namespace Blazr.Components.Editor
@typeparam TValue
@typeparam TListItem

<InputSelect @attributes=AdditionalAttributes
             TValue="TValue"
             Value=this.Value
             ValueChanged=this.OnChange
             ValueExpression=this.ValueExpression>

    @if (this.Value is null)
    {
        <option selected disabled>@this.PlaceholderText</option>
    }

    @foreach (var option in this.DisplayOptionsItems)
    {
        <option value="@(this.OptionValueDelegate(option))">@(this.OptionTextDelegate(option))</option>
    }

</InputSelect>

@code {
    [Parameter] public TValue? Value { get; set; }
    [Parameter] public EventCallback<TValue?> ValueChanged { get; set; }
    [Parameter] public Expression<Func<TValue>>? ValueExpression { get; set; }

    [Parameter, EditorRequired] public IEnumerable<TListItem> DisplayOptionsItems { get; set; } = default!;
    [Parameter, EditorRequired] public Func<TListItem, string> OptionValueDelegate { get; set; } = default!;
    [Parameter, EditorRequired] public Func<TListItem, string> OptionTextDelegate { get; set; } = default!;

    [Parameter] public string PlaceholderText { get; set; } = " -- Select an Option -- ";
    [Parameter(CaptureUnmatchedValues = true)] public IReadOnlyDictionary<string, object>? AdditionalAttributes { get; set; }

    protected override void OnInitialized()
    {
        // Check we have a Options list if not throw an exception before we try and render a null list
        ArgumentNullException.ThrowIfNull(this.DisplayOptionsItems);
        ArgumentNullException.ThrowIfNull(this.OptionValueDelegate);
        ArgumentNullException.ThrowIfNull(this.OptionTextDelegate);
    }

    private Task OnChange(TValue value)
        => this.ValueChanged.InvokeAsync(value);
}
