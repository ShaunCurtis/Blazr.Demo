@*
/// ============================================================
/// Author: Shaun Curtis, Cold Elm Coders
/// License: Use And Donate
/// If you use it, donate something to a charity somewhere
/// ============================================================
*@

@namespace Blazr.Components.Editor
@typeparam TValue
@typeparam TListItem

<div class="btn-toolbar">
    <div class="btn-group my-1 p-1 @GetValidCss()">
        @foreach (var option in DisplayOptionsItems)
        {
            <button type="button" class="@(this.GetButtonCss(option))" @onclick="() => this.OnSetValue(option)">@(this.OptionTextDelegate(option))</button>
        }
    </div>
</div>

@code {
    [CascadingParameter] private EditContext? _editContext { get; set; }

    [Parameter] public TValue? Value { get; set; }
    [Parameter] public EventCallback<TValue?> ValueChanged { get; set; }
    [Parameter] public Expression<Func<string>>? ValueExpression { get; set; }

    [Parameter, EditorRequired] public IEnumerable<TListItem> DisplayOptionsItems { get; set; } = default!;
    [Parameter, EditorRequired] public Func<TListItem, TValue> OptionValueDelegate { get; set; } = default!;
    [Parameter, EditorRequired] public Func<TListItem, string> OptionTextDelegate { get; set; } = default!;

    [Parameter] public string SelectedButtonCss { get; set; } = "btn btn-sm btn-primary";
    [Parameter] public string ButtonCss { get; set; } = "btn btn-sm btn-secondary";

    [Parameter(CaptureUnmatchedValues = true)] public IReadOnlyDictionary<string, object>? AdditionalAttributes { get; set; }

    private string GetButtonCss(TListItem item)
    {
        var value = this.OptionValueDelegate(item);
        if (value is not null && value.Equals(this.Value))
            return this.SelectedButtonCss;

        return this.ButtonCss;
    }

    private string GetValidCss()
    {
        if (_editContext is not null && ComponentHelper.TryGetFieldIdentifier(this.ValueExpression, out FieldIdentifier? fieldIdentifier))
        {
                return _editContext.IsValid(fieldIdentifier ?? new())
                    ? string.Empty
                    : "invalid";
        }
        return string.Empty;
    }

    protected override void OnInitialized()
    {
        // Check we have a Options list if not throw an exception before we try and render a null list
        ArgumentNullException.ThrowIfNull(this.DisplayOptionsItems);
        ArgumentNullException.ThrowIfNull(this.OptionValueDelegate);
        ArgumentNullException.ThrowIfNull(this.OptionTextDelegate);
    }

    private async Task OnSetValue(TListItem item)
    {
        var value = this.OptionValueDelegate(item);
        await this.ValueChanged.InvokeAsync(value);

        if (ValueExpression is not null && _editContext is not null)
        {
            var fi = FieldIdentifier.Create(ValueExpression);
            _editContext?.NotifyFieldChanged(fi);
        }
    }
}
