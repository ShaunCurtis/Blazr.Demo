@namespace Blazr.App.FluentUI
@inject IDialogService DialogService

<FluentStack Style="margin-bottom: 24px;" HorizontalAlignment="HorizontalAlignment.Right" VerticalAlignment="VerticalAlignment.Center">
    <FluentButton Color="var(--info)" IconStart="@(new Icons.Regular.Size16.AddCircle())"
                  OnClick="@OnAddAsync">
        Add An Item
    </FluentButton>
</FluentStack>

<FluentDataGrid Id="invoicegrid" Items="_invoiceItems" GridTemplateColumns="1fr 2fr 1fr 1fr" TGridItem=DmoInvoiceItem>
    <PropertyColumn Title="Id" Property="@(c => c!.InvoiceItemId.Value.ToDisplayId())" Align=Align.Start />
    <PropertyColumn Title="Description" Property="@(c => c!.Description)" Sortable="true" Align=Align.Start />
    <PropertyColumn Title="Amount" Property="@(c => c!.Amount)" Sortable="true" Align=Align.Start />
    <TemplateColumn Title="Actions" Align="@Align.End">
        <FluentButton aria-label="View item" IconEnd="@(new Icons.Regular.Size16.ContentView())" OnClick="() => OnViewAsync(context.InvoiceItemId)" />
        <FluentButton aria-label="Edit item" IconEnd="@(new Icons.Regular.Size16.Edit())" OnClick="() => OnEditAsync(context.InvoiceItemId)" />
    </TemplateColumn>
</FluentDataGrid>

@code {
    [CascadingParameter] private InvoiceComposite Composite { get; set; } = default!;

    private IQueryable<DmoInvoiceItem> _invoiceItems => this.Composite.InvoiceItems.AsQueryable();
    private GridSort<Guid> _rankSort = GridSort<Guid>
        .ByDescending(x => x);

    protected override void OnInitialized()
    {
        ArgumentNullException.ThrowIfNull(this.Composite);
    }

    private async Task OnEditAsync(InvoiceItemId id)
    {
        InvoiceItemEditData data = new(id, this.Composite); 
        var dialog = await DialogService.ShowDialogAsync<InvoiceItemEditForm>(data, new DialogParameters()
            {
                Title = $"Edit Invoice Item",
                PreventDismissOnOverlayClick = true,
                PreventScroll = true,
            });

        var result = await dialog.Result;
    }

    private async Task OnViewAsync(InvoiceItemId id)
    {
        var dialog = await DialogService.ShowDialogAsync<InvoiceItemViewForm>(id, new DialogParameters()
            {
                Title = $"View Invoice Item",
                Width = "80%",
                PreventDismissOnOverlayClick = true,
                PreventScroll = true,
            });

        var result = await dialog.Result;
    }

    private async Task OnAddAsync()
    {
        var id = new InvoiceItemId(Guid.Empty);
        InvoiceItemEditData data = new(id, this.Composite); 
        var dialog = await DialogService.ShowDialogAsync<InvoiceItemEditForm>(data, new DialogParameters()
            {
                Title = $"New Invoice Item",
                Width = "80%",
                PreventDismissOnOverlayClick = true,
                PreventScroll = true,
            });

        var result = await dialog.Result;
    }
}
