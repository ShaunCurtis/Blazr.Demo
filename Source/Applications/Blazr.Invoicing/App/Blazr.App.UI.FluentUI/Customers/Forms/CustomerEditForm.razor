@namespace Blazr.App.UI.FluentUI
@implements IDialogContentComponent<CustomerId>
@implements IDisposable
@inject PresenterFactory PresenterFactory
 @inject IToastService ToastService

<!-- Header -->
<FluentDialogHeader ShowDismiss="_isClean">
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        @if (this.Presenter.IsNew)
        {
            <FluentIcon Value="@(new Icons.Regular.Size24.Add())" />
        }
        else
        {
            <FluentIcon Value="@(new Icons.Regular.Size24.Edit())" />
        }
        <FluentLabel Typo="Typography.PaneHeader">
            @Dialog.Instance.Parameters.Title
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>

<!-- Body -->
<FluentDialogBody>

    @if (!this.Presenter.LastDataResult.Successful)
    {
        <FluentMessageBar Title="Save Failed" Intent="@MessageIntent.Error">
            @this.Presenter.LastDataResult.Message
        </FluentMessageBar>

    }

    @if (this.Presenter.EditContext is not null)
    {
        <EditForm EditContext="Presenter.EditContext">
            <BlazrEditStateTracker LockNavigation="true" />
            <BlazrFluentValidator TRecord="CustomerEditContext" TValidator="DmoCustomerEditContextValidator" />
            <FluentGridItem sm="12">
                <FluentTextField Style="width: 100%;"
                                 @bind-Value="@this.Presenter.RecordEditContext.CustomerName"
                                 Placeholder="Enter the Customer Name"
                                 Immediate
                                 Label="Customer Name" />
            </FluentGridItem>
            <div style="color: var(--error);">
                <FluentValidationSummary />
            </div>
        </EditForm>
    }

</FluentDialogBody>

<!-- Footer -->
<FluentDialogFooter>

    <FluentButton Appearance=" _isDirty ? Appearance.Accent : Appearance.Neutral" Disabled="_isClean" OnClick="@OnSaveAsync">
        @(this.Presenter.IsNew ? "Add" : "Save")
    </FluentButton>

    <FluentButton Appearance="@( _isClean ? Appearance.Accent : Appearance.Neutral)" hidden="@_isDirty" OnClick="@OnExitAsync">
        Exit
    </FluentButton>

    <FluentButton Appearance="Appearance.Neutral" hidden="@_isClean" OnClick="@OnExitAsync" style="color: var(--error);">
        Exit Without Saving
    </FluentButton>

</FluentDialogFooter>

@code
{
    [CascadingParameter] public FluentDialog Dialog { get; set; } = default!;
    [Parameter] public CustomerId Content { get; set; } = default!;

    // Set to default as initialized in SetParameterProperties before the first Render
    private IEditPresenter<DmoCustomer, CustomerId, CustomerEditContext> Presenter = default!;

    private bool _isDirty;
    private bool _isClean => !_isDirty;
    private bool _stateStoreAttached;
    private bool _isNotInitialized = true;
    private BlazrEditStateStore? _store;

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        parameters.SetParameterProperties(this);

        // Get the presenter
        if(_isNotInitialized)
        {
            var isNew = this.Content.Value == Guid.Empty;
            this.Presenter = await this.PresenterFactory.CreateEditPresenterAsync<DmoCustomer, CustomerId, CustomerEditContext>(this.Content, isNew);
            _isNotInitialized = false;
        }

        await base.SetParametersAsync(ParameterView.Empty);
    }

    protected override void OnParametersSet()
    {
        // Get the edit state on each render request
        _isDirty = this.Presenter.EditContext.GetEditState();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        // The EditContext is only created after the first render.
        // We need to make sure the StateStore has been attached to the EditContext
        // before we try and get it.
        // The only place we can do this is in the second OnAfterRender UI event
        _store = _store ?? this.Presenter.EditContext.GetStateStore();
        if (_store is not null && !_stateStoreAttached)
        {
            _store.StoreUpdated += OnEditStateMayHaveChanged;
            _stateStoreAttached = true;
        }
    }

    private async Task OnSaveAsync()
    {
        if (!this.Presenter.EditContext.Validate())
        {
            this.ToastService.ShowError("The record data is not valid.  Fix the highlighted errors.");
            return;
        }

        await this.Presenter.SaveItemAsync();

        if (this.Presenter.LastDataResult.Successful)
            await Dialog.CloseAsync(Content);
    }

    private async Task OnExitAsync()
    {
        await Dialog.CancelAsync();
    }

    protected void OnEditStateMayHaveChanged(object? sender, EventArgs e)
    {
        _isDirty = this.Presenter.EditContext.GetEditState();
        this.StateHasChanged();
    }

    protected void OnValidationStateMayHaveChanged(object? sender, ValidationStateChangedEventArgs e)
    {
        this.StateHasChanged();
    }

    public void Dispose()
    {
        if (_store is not null)
            _store.StoreUpdated -= OnEditStateMayHaveChanged;
    }
}
