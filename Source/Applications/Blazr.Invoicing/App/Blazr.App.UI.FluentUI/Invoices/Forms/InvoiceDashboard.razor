@namespace Blazr.App.UI.FluentUI
@inject NavigationManager NavManager
@inject IDataBroker DataBroker
@inject IToastService ToastService
@inject IDialogService DialogService
@inject InvoiceCompositePresenter Presenter
@implements IDisposable

<FluentOverlay @bind-Visible="_loading"
               Opacity="0.4"
               Alignment="Align.Center"
               Justification="JustifyContent.Center">
    <FluentProgressRing />
</FluentOverlay>

@if (!_loading)
{
    <CascadingValue Value="this.Presenter.Composite">

        <FluentStack VerticalAlignment="VerticalAlignment.Center">
            <FluentIcon Value="@(new Icons.Regular.Size24.DocumentBorder())" />
            <FluentLabel Typo="Typography.PaneHeader">
                Invoice Manager
            </FluentLabel>
        </FluentStack>

        @if (_isDirty)
        {
            <FluentStack VerticalAlignment="VerticalAlignment.Center" Style="margin:0.5rem;">
                <FluentMessageBar AllowDismiss="false" Intent="_messageIntent">
                    @_message
                </FluentMessageBar>
            </FluentStack>
        }

        <FluentStack VerticalAlignment="VerticalAlignment.Center" HorizontalAlignment="HorizontalAlignment.Right">

            <FluentButton Appearance="Appearance.Accent" OnClick="this.EditAsync">
                Edit Invoice Data
            </FluentButton>

            @if (_isDirty)
            {
                <FluentButton Appearance="Appearance.Accent" OnClick="this.SaveAsync">
                    Save Invoice
                </FluentButton>
                <FluentButton Appearance="Appearance.Neutral" OnClick="this.ExitWithoutSavingAsync" style="color: var(--error);">
                    Exit Without Saving
                </FluentButton>
            }
            else
            {
                <FluentButton Appearance="Appearance.Neutral" OnClick="this.ExitAsync">
                    Exit
                </FluentButton>
            }

        </FluentStack>

        <InvoiceViewForm />

        <FluentStack VerticalAlignment="VerticalAlignment.Center">
            <FluentLabel Typo="Typography.PaneHeader">
                Invoice Items
            </FluentLabel>
        </FluentStack>

        <InvoiceItemListForm />

    </CascadingValue>
}

<NavigationLock OnBeforeInternalNavigation="this.OnLocationChanging" ConfirmExternalNavigation="_isDirty" />

@code {
    [Parameter, EditorRequired] public InvoiceId InvoiceId { get; set; } = new(Guid.Empty);

    private bool _loading = true;
    //private InvoiceComposite _item = new InvoiceComposite(new(), Enumerable.Empty<DmoInvoiceItem>(), true);
    private bool _isDirty => this.Presenter.Composite.State != OneWayStreet.Flux.FluxState.Clean;
    private bool _isError = false;
    private string _message => _isError ? this.Presenter.LastDataResult.Message ?? "Unspecified Error" : "Invoice changes are not currently saved to the data store!";
    private MessageIntent _messageIntent => _isError ? MessageIntent.Error : MessageIntent.Warning;
    private Task? _editor;

    protected async override Task OnInitializedAsync()
    {
        await Task.Delay(500);

        await this.Presenter.LoadAsync(this.InvoiceId);
        this.Presenter.Composite.StateHasChanged += this.OnCompositeStateChanged;
        _loading = false;

        if (this.Presenter.Composite.State == OneWayStreet.Flux.FluxState.New)
            _editor = EditAsync();
    }

    private Task OnLocationChanging(LocationChangingContext context)
    {
        // Need to check if the invoice is dirty before letting the user exit
        if (_isDirty)
        {
            context.PreventNavigation();
            this.ToastService.ShowError("You can't navigate away from an unsaved invoice.  Choose Save or Exit Without Saving.");
        }

        return Task.CompletedTask;
    }

    private void OnCompositeStateChanged(object? sender, EventArgs e)
    {
        this.StateHasChanged();
    }

    private async Task EditAsync()
    {
        // Pop up the Editor dialog
        var dialog = await DialogService.ShowDialogAsync<InvoiceEditForm>(this.Presenter.Composite, new DialogParameters()
            {
                Title = this.Presenter.Composite.IsNew ? "Add Invoice" : "Edit Invoice",
                PreventDismissOnOverlayClick = true,
                PreventScroll = true,
            });

        // Await the result when the dialog closes
        var result = await dialog.Result;

        // If we have a cancelled new invoice we need to exit back to the invoices page
        if (result.Cancelled && this.Presenter.Composite.State == OneWayStreet.Flux.FluxState.New)
        {
            this.ToastService.ShowEvent("You exited creating the new invoice.");
            this.Presenter.Composite.Persisted();
            this.NavManager.NavigateTo($"/invoices");
        }
    }

    private async Task SaveAsync()
    {
        // Build the command request and execute it
        var state = this.Presenter.Composite.State.AsCommandState;
        CommandRequest<InvoiceComposite> command = new() { Item = this.Presenter.Composite, State = state };
        var result = await this.DataBroker.ExecuteCommandAsync(command);

        // On Success we need to update the composite state so we can exit to the invoices page
        if (result.Successful)
        {
            this.Presenter.Composite.Persisted();
            this.NavManager.NavigateTo($"/invoices");
            return;
        }
    }

    private Task ExitAsync()
    {
        // Normal exit.  Will be aborted by the Navigation Locker if the composite is dirty
        this.NavManager.NavigateTo($"/invoices");
        return Task.CompletedTask;
    }

    private Task ExitWithoutSavingAsync()
    {
        // We aren't saving the composite so we can update the state so we can exit
        this.Presenter.Composite.Persisted();

        this.NavManager.NavigateTo($"/invoices");
        return Task.CompletedTask;
    }

    public void Dispose()
    {
        this.Presenter.Composite.StateHasChanged -= this.OnCompositeStateChanged;
    }
}