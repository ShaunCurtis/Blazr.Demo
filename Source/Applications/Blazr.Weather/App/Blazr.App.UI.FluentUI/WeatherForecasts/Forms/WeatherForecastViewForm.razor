@namespace Blazr.App.UI.FluentUI
@implements IDialogContentComponent<WeatherForecastId>
@inject PresenterFactory PresenterFactory

<!-- Header -->
<FluentDialogHeader ShowDismiss="true">
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentIcon Value="@(new Icons.Regular.Size24.ContentView())" />
        <FluentLabel Typo="Typography.PaneHeader">
            @Dialog.Instance.Parameters.Title
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>

<!-- Body -->
<FluentDialogBody>
    <FluentGrid Spacing="1" AdaptiveRendering="true" >
        <FluentGridItem sm="12" md="6">
            <FluentTextField Style="width: 100%;"
                             Value="@this.Presenter.Item.Date.ToString("dd-MMM-yy")"
                             Label="Date"
                             ReadOnly />
        </FluentGridItem>
        <FluentGridItem sm="12" md="6">
            <FluentTextField Style="width: 100%;"
                             Value="@this.Presenter.Item.Summary"
                             Label="Summary"
                             ReadOnly />
        </FluentGridItem>
    </FluentGrid>
    <FluentGrid Spacing="1" AdaptiveRendering="true">
        <FluentGridItem sm="12" md="6">
            <FluentTextField Style="width: 100%;"
                             Value="@this.Presenter.Item.Temperature.TemperatureC.ToString("N0")"
                             Label="Temperature &deg; C"
                             ReadOnly />
        </FluentGridItem>
        <FluentGridItem sm="12" md="6">
            <FluentTextField Style="width: 100%;"
                             Value="@this.Presenter.Item.Temperature.TemperatureF.ToString("N0")"
                             Label="Temperature &deg; F"
                             ReadOnly />
        </FluentGridItem>
    </FluentGrid>
    <FluentGrid Spacing="1" AdaptiveRendering="true">
        <FluentGridItem sm="12" md="6">
            <FluentTextField Style="width: 100%;"
                             Value="@this.Presenter.Item.WeatherForecastId.Value.ToString()"
                             Label="Full Id"
                             ReadOnly />
        </FluentGridItem>
    </FluentGrid>
</FluentDialogBody>

<!-- Footer -->
<FluentDialogFooter>
    <FluentButton Appearance="Appearance.Accent" OnClick="@ExitAsync">
        Exit
    </FluentButton>
</FluentDialogFooter>

@code
{
    public readonly Guid ComponentId = Guid.NewGuid();

    [CascadingParameter] public FluentDialog Dialog { get; set; } = default!;

    [Parameter] public WeatherForecastId Content { get; set; } = default!;

    private IViewPresenter<DmoWeatherForecast, WeatherForecastId> Presenter = default!;

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        parameters.SetParameterProperties(this);
    
        if(this.Presenter is null)
        {
            this.Presenter = await this.PresenterFactory.CreateViewPresenterAsync<DmoWeatherForecast, WeatherForecastId>(this.Content);    
        }

        await base.SetParametersAsync(ParameterView.Empty);
    }

    private async Task ExitAsync()
    {
        await Dialog.CancelAsync();
    }
}
