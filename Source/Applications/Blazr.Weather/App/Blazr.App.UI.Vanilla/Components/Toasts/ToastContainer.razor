@using System.Diagnostics
@inject IAppToastService ToastService
@implements IDisposable

<div class="toast-container position-fixed top-0 end-0 p-3" style="z-index:11;">

    @foreach (var toast in _toastViewService.Toasts)
    {
        <div class="toast show @this.ToastCss(toast.Type)" role="alert">
            <div class="d-flex">
                <div class="toast-body">
                    @toast.Message
                </div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" @onclick="() => this.DismissToast(toast.Uid)"></button>
            </div>
        </div>
    }
</div>

@code {
    private IAppToastViewService _toastViewService = default!;
    private Timer? _timer;
    private object _token = new();

    protected override void OnInitialized()
    {
        if (ToastService is IAppToastViewService appToastViewService)
            _toastViewService = appToastViewService;

        ArgumentNullException.ThrowIfNull(_toastViewService);

        _toastViewService.ToastsChanged += this.OnToastsChanged;
        this.OnTimerExpired(null);
    }

    private string ToastCss(ToastType toastType) => toastType switch
    {
        ToastType.Success => "text-white bg-success",
        ToastType.Warning => "text-white bg-warning",
        ToastType.Error => "text-white bg-danger",
        _ => "text-white bg-primary"
    };

    private void OnToastsChanged(object? sender, EventArgs e)
    {
        if (sender != _token)
        {
            this.OnTimerExpired(null);
            this.InvokeAsync(StateHasChanged);
        }
    }

    private void OnTimerExpired(object? state)
    {
        // Get the next timeout
        var timeOut = _toastViewService.NextToastTimeOut();

        // And if we have one add a one off timer
        if (timeOut != TimeSpan.Zero)
            _timer = new Timer(this.OnTimerExpired, null, timeOut, Timeout.InfiniteTimeSpan);
        else
            _timer = null;

        // Update the UI at least one Toast has timed out
        this.InvokeAsync(StateHasChanged);
    }

    private void DismissToast(Guid id)
    {
        _toastViewService.DismissToast(id, _token);
    }

    public void Dispose()
    {
        _toastViewService.ToastsChanged += this.OnToastsChanged;
    }
}
