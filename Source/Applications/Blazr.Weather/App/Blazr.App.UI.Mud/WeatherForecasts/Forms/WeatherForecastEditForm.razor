@using Blazr.Presentation.Toasts
@using Microsoft.AspNetCore.Components.Forms
@namespace Blazr.App.UI.Mud
@implements IDisposable
@inject WeatherForecastEditPresenter Presenter
@inject IAppToastService ToastService

<MudDialog>
    <DialogContent>
        <EditForm EditContext="Presenter.EditContext">

            <BlazrEditStateTracker LockNavigation="true" />

            <BlazrValidator TRecord="WeatherForecastEditContext"
                            TValidator="WeatherForecastEditContextValidator" />

            <MudGrid>
                <MudItem xs="12" sm="6">
                    <MudDatePicker Label="Date" HelperText="Date must be in the future." @bind-Date="_record.Date" For="() => _record.Date" />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudNumericField Label="Temperature &deg; C" HelperText="Enter a Temperature between -40 and 60" @bind-Value="_record.Temperature" For="() => _record.Temperature" />
                </MudItem>
            </MudGrid>

            <MudGrid>
                <MudItem xs="12" sm="6">
                    <MudAutocomplete T="string" Label="Summary" @bind-Value="_record.Summary" SearchFunc="this.SearchSummary" ResetValueOnEmptyText="true" />
                </MudItem>
            </MudGrid>

        </EditForm>

    </DialogContent>

    <DialogActions>
        <MudButton hidden="@_isClean" IconClass="@Icons.Material.Filled.Close" Color="Color.Error" OnClick="this.OnExitAsync">Exit without Saving</MudButton>
        <MudButton hidden="@_isDirty" IconClass="@Icons.Material.Filled.Close" Color="Color.Dark" OnClick="this.OnExitAsync">Exit</MudButton>
        <MudButton Disabled="_saveButtonDisabled" IconClass="@Icons.Material.Filled.Save" Color="Color.Primary" OnClick="this.OnSaveAsync">@_saveButtonText</MudButton>
    </DialogActions>

</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance? MudDialog { get; set; }
    [Parameter] public WeatherForecastId WeatherForecastId { get; set; } = default!;

    private bool _isDirty;
    private bool _isClean => !_isDirty;
    private bool _stateStoreAttached;
    private BlazrEditStateStore? _store;
    private bool _saveButtonDisabled => !this.Presenter.IsNew && _isClean;
    private string _saveButtonText => this.Presenter.IsNew ? "Add" : "Save";
    private WeatherForecastEditContext _record => this.Presenter.RecordEditContext;

    public readonly Guid ComponentId = Guid.NewGuid();

    protected async override Task OnInitializedAsync()
    {
        await this.Presenter.LoadAsync(this.WeatherForecastId);
    }

    protected override void OnParametersSet()
    {
        _isDirty = this.Presenter.EditContext?.GetEditState() ?? false;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        // The EditContext is only created after the first render.
        // We need to make sure the StateStore has been attached to the EditContext
        // before we try and get it.
        // The only place we can do this is in the second OnAfterRender UI event
        _store = _store ?? this.Presenter.EditContext?.GetStateStore();

        // if we are capturing the store we need to wire up the edit state handler
        if (_store is not null && !_stateStoreAttached)
        {
            _store.StoreUpdated += OnEditStateMayHaveChanged;
            _stateStoreAttached = true;
        }
    }

    private async Task OnSaveAsync()
    {
        // Check validation before saving.
        if (!this.Presenter.EditContext?.Validate() ?? false)
        {
            this.ToastService.ShowError("The record data is not valid.  Fix the highlighted errors.");
            return;
        }

        // Save the item
        await this.Presenter.SaveItemAsync();

        // Check the result and close the dialog
        if (this.Presenter.LastDataResult.Successful)
            MudDialog?.Close(DialogResult.Ok(true));
    }

    private Task OnExitAsync()
    {
        MudDialog?.Close(DialogResult.Cancel());
        return Task.CompletedTask;
    }

    private void OnEditStateMayHaveChanged(object? sender, EventArgs e)
    {
        _isDirty = this.Presenter.EditContext?.GetEditState() ?? false;
        this.StateHasChanged();
    }

    private Task<IEnumerable<string>> SearchSummary(string value, CancellationToken cancellationToken) 
    {

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return Task.FromResult(SummaryOptions.Summaries);

        return Task.FromResult(SummaryOptions.Summaries.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase)));
    }

    public void Dispose()
    {
        if (_store is not null)
            _store.StoreUpdated -= OnEditStateMayHaveChanged;
    }
}
