@namespace Blazr.Edit
@inherits UIComponentBase
@implements IDisposable

<div class="mb-3">
    @if (this.FieldName is not null)
    {
        <label class="form-label)">@this.labelName</label>
    }
    @this.ChildContent
    
    <FieldValidationMessage FieldName=@this.FieldName Hint=@this.Hint />
</div>

@code {
    [CascadingParameter] public IEditContext RecordEditContext { get; set; } = default!;
    [Parameter, EditorRequired] public string? DisplayName { get; set; }
    [Parameter, EditorRequired] public string? FieldName { get; set; }
    [Parameter] public string? Hint { get; set; }

    private string? labelName => DisplayName ?? FieldName ?? null;

    protected override ValueTask<bool> OnParametersChangedAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (RecordEditContext is null)
                throw new NullReferenceException($"{this.GetType().Name} requires a cascaded IRencordEditContext");

            this.RecordEditContext.ValidationStateUpdated += this.OnValidationStateUpdated;
            //this.RecordEditContext.FieldChanged += this.OnFieldChanged;
        }

        return ValueTask.FromResult(true);
    }

    private void OnValidationStateUpdated(object? sender, ValidationStateEventArgs e)
        => this.StateHasChanged();

    private void OnFieldChanged(object? sender, string? field)
       => this.StateHasChanged();

    public void Dispose()
    {
        this.RecordEditContext.ValidationStateUpdated -= this.OnValidationStateUpdated;
        //this.RecordEditContext.FieldChanged -= this.OnFieldChanged;
    }
}
