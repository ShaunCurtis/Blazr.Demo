@namespace Blazr.UI
@inherits UIComponentBase

@this.RenderedContent

@code {
    //TODO - Need to update to latest methodology
    [Parameter, EditorRequired] public IEditContext? EditContext { get; set; }
    [Parameter, EditorRequired] public ComponentState State { get; set; } = ComponentState.Loading;

    [Parameter] public RenderFragment? LoadingMessage { get; set; }

    [Parameter] public RenderFragment? ErrorMessage { get; set; }

    private RenderFragment? RenderedContent;  

    protected override ValueTask<bool> OnParametersChangedAsync(bool firstRender)
    {
        this.RenderedContent = this.State switch
        {
            ComponentState.Loaded => this.Content,
            ComponentState.InError => this.ErrorMessage ?? this.Error,
            _ => this.LoadingMessage ?? this.Loading
        };

        return ValueTask.FromResult(true);
    }

    private void Content(RenderTreeBuilder __builder)
    {
        <form>
            @if (this.State is ComponentState.Loaded)
            {
                <CascadingValue Value=this.EditContext IsFixed=true>
                    @this.ChildContent
                </CascadingValue>
            }
        </form>
    }

    private void Loading(RenderTreeBuilder __builder)
    {
        <div class="alert alert-info">Loading...</div>
    }

    private void Error(RenderTreeBuilder __builder)
    {
        <div class="alert alert-danger">Error Loading Page</div>
    }

}
