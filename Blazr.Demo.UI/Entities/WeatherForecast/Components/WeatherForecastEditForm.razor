@*/// ============================================================
    /// Author: Shaun Curtis, Cold Elm Coders
    /// License: Use And Donate
    /// If you use it, donate something to a charity somewhere
    /// ============================================================
*@

@namespace Blazr.Demo.UI
@inherits EditorForm<DboWeatherForecast, DeoWeatherForecast, WeatherForecastService>
@implements IDisposable
@inject IForeignKeyService<FkWeatherSummaryId, WeatherSummaryService> FkService
<PageLocker />
<UILoader State="this.LoadState">
    <FormViewTitle>
        <h2>Weather Forecast Editor</h2>
    </FormViewTitle>
    <EditForm EditContext="this.editContext">
        <ValidationFormState />
        <UIContainer Size=BootstrapSize.Fluid>
            <UIFormRow>
                <UIColumn Columns=12 MediumColumns=6>
                    <FormEditControl Label="Date" ShowLabel="true" @bind-Value="this.crudService.EditModel.Date" ControlType="typeof(InputDate<DateTimeOffset>)" IsRequired="true" ShowValidation="true" />
                </UIColumn>
                <UIColumn Columns=12 MediumColumns=6>
                    <FormEditControl Label="Temperature &deg;C" ShowLabel="true" @bind-Value="this.crudService.EditModel.TemperatureC" ControlType="typeof(InputNumber<int>)" IsRequired="true" ShowValidation="true"  HelperText="Enter a temperature" />
                </UIColumn>
            </UIFormRow>
            <UIFormRow>
                <UIColumn Columns=12 MediumColumns=6>
                    <FormEditControl Label="Summary" ShowLabel="true" @bind-Value="this.crudService.EditModel.SummaryId" ControlType="typeof(InputSelect<Guid>)" IsRequired="true" ShowValidation="true" HelperText="Enter a summary from the list">
                        @this.SummaryList
                    </FormEditControl>
                </UIColumn>
            </UIFormRow>
        </UIContainer>
        <UIContainer Size=BootstrapSize.Fluid>
            <UIFormRow>
                <UIColumn Columns=12 MediumColumns=7 class="">
                    <UIAlertMessage AlertColour="@this.alertColour" Message="@this.alertMessage" />
                </UIColumn>
                <UIColumn Columns=12 MediumColumns=5 class="text-end text-right">
                    <UIButton class="btn-warning" Show="this.IsDirty && !this.IsNew" ClickEvent="this.ResetRecord">Reset Fields</UIButton>
                    <UIButton class="btn-success" Show=this.IsNew Disabled="!this.IsDirty" ClickEvent="this.AddRecord">Add</UIButton>
                    <UIButton class="btn-success" Show=!this.IsNew Disabled="!this.IsDirty" ClickEvent="this.SaveRecord">Save</UIButton>
                    <UIButton class="btn-dark" Show="!this.IsDirty" ClickEvent="this.Exit">Exit</UIButton>
                    <UIButton class="btn-danger" Show="this.IsDirty" ClickEvent="this.ExitWithoutSaving">Exit Without Saving</UIButton>
                </UIColumn>
            </UIFormRow>
        </UIContainer>
    </EditForm>
</UILoader>

@code {
        protected async override Task OnInitializedAsync()
    {
        await this.FkService.GetFkList();
        await base.OnInitializedAsync();
    }

    private RenderFragment SummaryList => (__builder) =>
    {
        @foreach (var item in this.FkService.FkList)
        {
            <option value="@item.Id">@item.Name</option>
        }
    };

    protected override void BaseExit()
        => this.NavManager?.NavigateTo("/weatherforecasts");

}
