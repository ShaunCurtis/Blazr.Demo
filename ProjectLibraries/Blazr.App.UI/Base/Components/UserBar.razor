@*/// ============================================================
    /// Author: Shaun Curtis, Cold Elm Coders
    /// License: Use And Donate
    /// If you use it, donate something to a charity somewhere
    /// ============================================================*@

@implements IDisposable
@namespace Blazr.App.UI

<UILoader State=this.state>

    <span class="mr-2 me-2">Change User:</span>
    <div class="w-25">
        <select id="userselect" class="form-control" @onchange="ChangeUser">
            @foreach (var value in this.Users)
            {
                @if (value.Key == _currentUserId)
                {
                    <option value="@value.Key" selected>@value.Value</option>
                }
                else
                {
                    <option value="@value.Key">@value.Value</option>
                }
            }
        </select>
    </div>
    <span class="text-nowrap ml-3 ms-3">
        <AuthorizeView>
            <Authorized>
                @if (this.user is not null && this.user.Identity is not null)
                {
                    <span>Hello, @this.user!.Identity!.Name</span>
                }
            </Authorized>
            <NotAuthorized>
                Not Logged In
            </NotAuthorized>
        </AuthorizeView>
    </span>
</UILoader>

@code {
    private ComponentState state = ComponentState.Loading;

    [CascadingParameter] public Task<AuthenticationState>? AuthTask { get; set; }

    [Inject] private AuthenticationStateProvider? AuthState { get; set; } = default!;

    private System.Security.Claims.ClaimsPrincipal user = new ClaimsPrincipal();
    private Guid _currentUserId = GuidExtensions.Null;

    protected async override Task OnInitializedAsync()
    {
        var authState = await AuthTask!;
        this.user = authState.User;
        this.state = ComponentState.Loaded;
        AuthState!.AuthenticationStateChanged += this.OnUserChanged;
    }

    private bool GetSelected(string value)
        => user.Identity!.Name!.Equals(value, StringComparison.CurrentCultureIgnoreCase);

    private async Task ChangeUser(ChangeEventArgs e)
    {
        if (AuthState is AppAuthenticationStateProvider && e.Value is not null && Guid.TryParse(e.Value.ToString(), out Guid Id))
            await ((AppAuthenticationStateProvider)AuthState).ChangeUser(Id);
    }

    private async void OnUserChanged(Task<AuthenticationState> state)
        => await this.GetUser(state);

    private async Task GetUser(Task<AuthenticationState> state)
    {
        var authState = await state;
        this.user = authState.User;
    }

    private Dictionary<Guid, string> Users = new Dictionary<Guid, string>
    {
        {GuidExtensions.Null, "Anonymous"},
        {new Guid("00000000-0000-0000-0000-000000000001"), "Visitor"},
        {new Guid("00000000-0000-0000-0000-100000000001"), "User-1"},
        {new Guid("00000000-0000-0000-0000-100000000002"), "User-2"},
        {new Guid("00000000-0000-0000-0000-100000000003"), "User-3"},
        {new Guid("00000000-0000-0000-0000-200000000001"), "Admin"},
    };

    public void Dispose()
        => AuthState!.AuthenticationStateChanged -= this.OnUserChanged;
}
