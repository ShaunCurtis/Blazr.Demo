@namespace Blazr.App.UI
@typeparam TRecord where TRecord : class, new()
@typeparam TEntity where TEntity  : class, IEntity
@inherits BlazrPagedListForm<TRecord, TEntity>

<UIContainer Size=BootstrapSize.Fluid class="@this.ContainerCss">
    <FormViewTitle>
        <h2>List of Weather Forecasts</h2>
    </FormViewTitle>
    <ListForm ListContext=this.ListContext>
        <UIContainer Size=BootstrapSize.Fluid>
            <UIFormRow class="my-2">
                <UIColumn Columns=12 LargeColumns=8 class="text-start">
                    <PagingControl @ref=this.pagingControl />
                </UIColumn>
                <UIColumn Columns=2 LargeColumns=4 class="text-right text-end">
                    <UIAuthorizeButton Policy=@AppAuthorizationPolicies.IsUserPolicy class="btn-primary btn-sm" ClickEvent="() => this.AddRecordAsync()">@this.NewRecordText</UIAuthorizeButton>
                    <UIButton class="btn-secondary btn-sm" Show=(!this.IsSubForm) ClickEvent="this.Exit">Exit</UIButton>
                </UIColumn>
            </UIFormRow>
        </UIContainer>
        @this.Childcontent
    </ListForm>
</UIContainer>

@code {
    protected RenderFragment RowButtonMarkup(Guid id, bool showDash = false) => __builder =>
    {
        <UIButtonGroup>
            @if (showDash)
            {
                <UIButton type="button" class="btn-sm btn-primary" ClickEvent="() => this.RecordDashboard(id)">Dash</UIButton>
            }
            
            <UIButton type="button" class="btn-sm btn-secondary" ClickEvent="() => this.ViewRecord(id)">View</UIButton>
            <UIButton type="button" class="btn-sm btn-danger" ClickEvent="() => this.EditRecord(id)">Edit</UIButton>
        </UIButtonGroup>
    };

    protected RenderFragment AuthorizedRowButtonMarkup(TRecord record, Guid id, bool showDash = false) => __builder =>
    {
        <UIButtonGroup>
            @if (showDash)
            {
            <UIAuthorizeRecordButton Policy=@AppAuthorizationPolicies.IsViewerPolicy AuthFields="this.GetAuthFields(record)" type="button" class="btn-sm btn-primary" 
                ClickEvent="() => this.RecordDashboard(id)">Dash</UIAuthorizeRecordButton>
            }
            
            <UIAuthorizeRecordButton Policy=@AppAuthorizationPolicies.IsEditorPolicy AuthFields="this.GetAuthFields(record)" type="button" class="btn-sm btn-danger" 
                ClickEvent="() => this.EditRecord(id)">Edit</UIAuthorizeRecordButton>

            <UIAuthorizeRecordButton Policy=@AppAuthorizationPolicies.IsViewerPolicy AuthFields="this.GetAuthFields(record)" type="button" class="btn-sm btn-secondary" 
                ClickEvent="() => this.ViewRecord(id)">View</UIAuthorizeRecordButton>
        </UIButtonGroup>
    };
}

