@*
/// ============================================================
/// Author: Shaun Curtis, Cold Elm Coders
/// License: Use And Donate
/// If you use it, donate something to a charity somewhere
/// ============================================================
*@
@namespace Blazr.UI
@inherits BlazrControlBase
@implements IDisposable

<div class="@this.ColumnCss">
    <div class="text-end">
        <UIButton Type="button" Hidden=@_isClean ButtonSize=UIButtonSize.Small ButtonColourType=UIButtonColourType.Reset ClickEvent=this.OnReset>@Options.ResetText</UIButton>
        <UIButton Type="button" Hidden=@_isDirty ButtonSize=UIButtonSize.Small ButtonColourType=UIButtonColourType.Exit ClickEvent=this.OnDirtyExit>@Options.ExitText</UIButton>
        <UIButton Type="button" Hidden=@_isClean ButtonSize=UIButtonSize.Small ButtonColourType=UIButtonColourType.ExitWithoutSave ClickEvent=this.OnExit>@Options.ExitWithoutSaveText</UIButton>
        <UIButton Type="@_saveButtonType" Hidden=@_isClean ButtonSize=UIButtonSize.Small ButtonColourType=UIButtonColourType.Save ClickEvent=this.OnSave>@_saveButtonText</UIButton>
    </div>
</div>

@code {
    [CascadingParameter] private EditContext _editContext { get; set; } = default!;
    [Parameter] public EventCallback Exit { get; set; }
    [Parameter] public EventCallback DirtyExit { get; set; }
    [Parameter] public EventCallback Reset { get; set; }
    [Parameter] public EventCallback Save { get; set; }
    [Parameter] public string ColumnCss { get; set; } = "col-12 mb-3 text-end";
    [Parameter] public bool SaveOnSubmit { get; set; }
    [Parameter] public bool IsNewRecord { get; set; }
    [Parameter] public EditFormButtonsOptions Options { get; set; } = new();

    private bool _isDirty;
    private bool _isClean => !_isDirty;
    private string _saveButtonType => this.SaveOnSubmit ? "submit" : "button";
    private string _saveButtonText => this.IsNewRecord ? Options.SaveText : Options.UpdateText;

    protected override Task OnParametersSetAsync()
    {
        if (this.NotInitialized)
        {
            ArgumentNullException.ThrowIfNull(_editContext);
            _editContext.OnFieldChanged += OnFieldChanged;
        }
        // Gets the state every time the component is externally rendered
        _isDirty = _editContext.GetEditState();

        return Task.CompletedTask;
    }

    private Task OnSave()
    {
        if (!this.SaveOnSubmit)
            return this.Save.InvokeAsync();

        return Task.CompletedTask;
    }

    private Task OnReset()
       => this.Reset.InvokeAsync();

    private Task OnExit()
         => this.Exit.InvokeAsync();

    private Task OnDirtyExit()
        => this.DirtyExit.InvokeAsync();

    private void OnFieldChanged(object? sender, FieldChangedEventArgs e)
    {
        _isDirty = _editContext.GetEditState();
        this.StateHasChanged();
    }

    public void Dispose()
    => _editContext.OnFieldChanged -= OnFieldChanged;
}
