@namespace Blazr.App.UI
@inherits AggregateFormBase<InvoiceEntityService>
@implements IDisposable

<div class="row">

    <div class="col-12 col-lg-6 mb-2">
        <BlazrTextViewControl Label="Invoice No" Value="@context.InvoiceNumber" />
    </div>

    <div class="col-12 col-lg-6 mb-2">
        <BlazrTextViewControl Label="Invoice Date" Value="@context.InvoiceDate.AsGlobalDate()" />
    </div>

    <div class="col-12 col-lg-6 mb-2">
        <BlazrTextViewControl Label="Customer Name" Value="@context.CustomerName" />
    </div>

    <div class="col-12 col-lg-6 mb-2">
        <BlazrTextViewControl Label="Total" Value="@context.InvoicePrice.AsSterling()" />
    </div>

    <div class="col-12 col-lg-6 mb-2">
        <BlazrTextViewControl Label="Unique Id" Value="@context.Uid.Value" />
    </div>

</div>

<BsModalDialog @ref=modalDialog />

@code {
    [Inject] private InvoiceAggregateManager Manager { get; set; } = default!;
    [Parameter] public EventCallback SwitchToEditor { get; set; }

    private Invoice context => this.Manager.Record.Root;

    protected IModalDialog? modalDialog;

    protected override RenderFragment HeaderButtonContent => (__builder) =>
    {
        <UIButton ButtonColourType=UIButtonColourType.Delete ClickEvent=this.OnDeleteAsync>Delete</UIButton>
        <UIButton Hidden="@(!this.Manager.Record.IsDirty)"
                  ButtonColourType=UIButtonColourType.Reset ClickEvent=this.OnResetAsync>Reset Everything</UIButton>
        <UIButton ButtonColourType=UIButtonColourType.Edit ClickEvent=this.OnEditAsync>Edit Invoice Data</UIButton>
        <UIButton Hidden="@(!this.Manager.Record.IsDirty)"
                  ButtonColourType=UIButtonColourType.Save ClickEvent=this.OnSaveAsync>Save Invoice</UIButton>
        <UIButton ButtonColourType="@(this.Manager.Record.IsDirty ? UIButtonColourType.ExitWithoutSave : UIButtonColourType.Exit)"
                  ClickEvent=this.OnExitAsync>Exit</UIButton>
    };

    protected override RenderFragment ActionBarContent => (__builder) => { };

    protected override Task OnParametersSetAsync()
    {
        if (this.NotInitialized)
        {
            ArgumentNullException.ThrowIfNull(Manager);
            this.NotificationService.RecordChanged += this.OnRecordChanged;
            this.ExitUrl = "/invoices";
        }

        return Task.CompletedTask;
    }

    private async Task OnEditAsync()
    {
        var options = new ModalOptions();
        options.ControlParameters.Add("Uid", context.Uid);

        if (modalDialog is not null && this.UIEntityService.EditForm is not null)
        {
            await modalDialog.ShowAsync(typeof(InvoiceEditForm), options);

            this.StateHasChanged();
        }
    }

    private async Task OnResetAsync()
        => await this.Manager.ResetAggregateAsync();

    protected override async Task OnExitAsync()
    {
        // if we have a clean manager then we can exit
        if (!this.Manager.Record.IsDirty)
        {
            await base.OnExitAsync();
            return;
        }

        // If we have a dirty manager we need to prompt before exit
        var options = new BSModalOptions() { ModalSize = BsModalSizes.Normal };
        options.ControlParameters.Add("Message", "Confirm you wish to exit the Invoice with unsaved data.");

        if (modalDialog is not null)
        {
            var result = await modalDialog.ShowAsync<CancelConfirm>(options);
            if (result.ResultType == ModalResultType.OK)
            {
                this.Manager.Record.ResetAggregate();
                await base.OnExitAsync();
            }
        }
    }

    private async Task OnDeleteAsync()
    {
        var options = new BSModalOptions() { ModalSize = BsModalSizes.Normal };
        options.ControlParameters.Add("Message", "Confirm you want to delete this Invoice.");

        if (modalDialog is not null)
        {
            var result = await modalDialog.ShowAsync<CancelConfirm>(options);
            if (result.ResultType == ModalResultType.OK)
            {
                // Mark the invoice as deleted
                this.Manager.Record.DeleteRoot(this.Manager.Record.Root);
                // Update the data store
                await this.Manager.UpdateToDataStoreAsync();
                // Reset so the record is clean
                this.Manager.Record.ResetAggregate();
                // Exit
                await base.OnExitAsync();
            }
        }
    }

    private async Task OnSaveAsync()
    {
        await this.Manager.UpdateToDataStoreAsync();
        this.StateHasChanged();
    }

    private void OnRecordChanged(object? sender, RecordChangedEventArgs e)
        => this.StateHasChanged();

    public void Dispose()
        => this.NotificationService.RecordChanged -= this.OnRecordChanged;

}
